# Multi-stage build for production
FROM node:18-alpine AS frontend-build

WORKDIR /app/frontend
COPY frontend/package*.json ./
# Install ALL dependencies (including dev dependencies for build)
RUN npm ci
COPY frontend/ ./
RUN npm run build

FROM python:3.9-slim AS backend-build

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies with correct versions
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY rasa/requirements.txt ./rasa-requirements.txt
RUN pip install --no-cache-dir -r rasa-requirements.txt

# Copy application code
COPY backend/ ./backend/
COPY rasa/ ./rasa/
COPY database/ ./database/

# Copy built frontend
COPY --from=frontend-build /app/frontend/dist ./frontend/dist

# Create non-root user FIRST
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app

# TRAIN MODEL AS NON-ROOT USER (Rasa 3.x compatible)
USER appuser
RUN cd rasa && rasa train

# Expose port (only 8000 for Render)
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start command - Rasa 3.x compatible with better error handling
CMD ["sh", "-c", "cd /app/rasa && rasa run actions --actions actions --port 5055 & sleep 10 && rasa run --enable-api --cors '*' --port 5005 & sleep 15 && cd /app/backend && uvicorn app.main:app --host 0.0.0.0 --port 8000"]
